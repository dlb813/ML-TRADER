{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport * as Sentiment from \"sentiment\";\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction HomeScreen() {\n  useEffect(function () {}, []);\n\n  function Predict(name) {\n    var res, report, rep, thought, sentiment, options, prediction, pred;\n    return _regeneratorRuntime.async(function Predict$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"predicting\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/generate?q=Will%20' + name + '%20Apple%20stock%20increase%20or%20decrease?%20Why?\\n\\n', {\n              mode: 'cors'\n            }));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(res.text());\n\n          case 6:\n            report = _context.sent;\n            rep = report;\n            sentiment = new Sentiment();\n            options = {\n              extras: {\n                'amazing': 2,\n                'positive': 2,\n                'will be up': 2,\n                'to be up': 2,\n                'will decline': -3,\n                'expect a negative return ': -6,\n                'continue to rise': 2,\n                'is under pressure': -7\n              }\n            };\n            prediction = sentiment.analyze(rep, options);\n\n            if (prediction.score > 0) {\n              thought = \"Buy!\";\n            } else if (prediction.score == 0) {\n              thought = \"Hold!\";\n            } else {\n              thought = \"Sell!\";\n            }\n\n            pred = [thought, rep];\n            return _context.abrupt(\"return\", pred);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Stocks, {\n      makePrediction: Predict\n    })\n  });\n}\n\nfunction SettingsScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"Settings!\"\n    })\n  });\n}\n\nvar Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return _jsxs(Tab.Navigator, {\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen\n    })]\n  });\n}\n\nvar myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    theme: DarkTheme,\n    children: _jsx(MyTabs, {})\n  });\n}","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/App.jsx"],"names":["React","NavigationContainer","Sentiment","DefaultTheme","DarkTheme","createBottomTabNavigator","useEffect","useState","ml5","getCompletion","Stocks","HomeScreen","Predict","name","console","log","fetch","mode","res","text","report","rep","sentiment","options","extras","prediction","analyze","score","thought","pred","flex","justifyContent","alignItems","SettingsScreen","Tab","MyTabs","myTheme","colors","background","border","primary","App"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport * as Sentiment from \"sentiment\";\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nfunction HomeScreen() {\n  useEffect(() => {\n\n  }, [])\n\n  async function Predict(name) {\n    var res;\n\n    console.log(\"predicting\");\n    var res = await fetch('http://localhost:3000/api/generate?q=Will%20' + name + '%20Apple%20stock%20increase%20or%20decrease?%20Why?\\n\\n', { mode: 'cors' });\n    var report = await res.text();\n    var rep = report;\n    \n    var thought;\n    var sentiment = new Sentiment();\n    var options = {\n      extras: {\n        'amazing': 2,\n        'positive': 2,\n        'will be up': 2,\n        'to be up': 2,\n        'will decline': -3,\n        'expect a negative return ': -6,\n        'continue to rise': 2,\n        'is under pressure':-7,\n      }\n    };\n    var prediction = sentiment.analyze(rep,options);\n    if (prediction.score > 0) {\n      thought = \"Buy!\";\n    }\n    else if(prediction.score==0)\n    {\n      thought = \"Hold!\";\n    }\n    else {\n      thought = \"Sell!\";\n    }\n    var pred = [thought, rep];\n    return pred;\n  }\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Stocks makePrediction={Predict} />\n    </View>\n  )\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\nconst myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return (\n    <NavigationContainer theme={DarkTheme}>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}"]},"metadata":{},"sourceType":"module"}
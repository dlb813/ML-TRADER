{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Cache = function () {\n  function Cache(options) {\n    _classCallCheck(this, Cache);\n\n    this.namespace = options.namespace;\n    this.backend = options.backend;\n    this.policy = options.policy;\n    var ttl = this.policy.stdTTL;\n\n    if (!ttl || typeof ttl !== \"number\") {\n      ttl = 0;\n    }\n\n    this.policy.stdTTL = ttl;\n  }\n\n  _createClass(Cache, [{\n    key: \"clearAll\",\n    value: function clearAll() {\n      var _this = this;\n\n      var keys, namespaceKeys;\n      return _regeneratorRuntime.async(function clearAll$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.backend.getAllKeys());\n\n            case 2:\n              keys = _context.sent;\n              namespaceKeys = keys.filter(function (key) {\n                return key.substr(0, _this.namespace.length) === _this.namespace;\n              });\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(this.backend.multiRemove(namespaceKeys));\n\n            case 6:\n              return _context.abrupt(\"return\", this.setLRU([]));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"enforceLimits\",\n    value: function enforceLimits() {\n      var lru, victimCount, victimList, removePromises, _iterator, _step, victimKey, survivorList;\n\n      return _regeneratorRuntime.async(function enforceLimits$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.policy.maxEntries) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(this.getLRU());\n\n            case 4:\n              lru = _context2.sent;\n              victimCount = Math.max(0, lru.length - this.policy.maxEntries);\n              victimList = lru.slice(0, victimCount);\n              removePromises = [];\n\n              for (_iterator = _createForOfIteratorHelperLoose(victimList); !(_step = _iterator()).done;) {\n                victimKey = _step.value;\n                removePromises.push(this.remove(victimKey));\n              }\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(Promise.all(removePromises));\n\n            case 11:\n              survivorList = lru.slice(victimCount);\n              return _context2.abrupt(\"return\", this.setLRU(survivorList));\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this2 = this;\n\n      var keys, namespaceKeys, results, allEntries, _iterator2, _step2, _ref, _ref2, compositeKey, value, key;\n\n      return _regeneratorRuntime.async(function getAll$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.backend.getAllKeys());\n\n            case 2:\n              keys = _context3.sent;\n              namespaceKeys = keys.filter(function (key) {\n                return key.substr(0, _this2.namespace.length) === _this2.namespace;\n              });\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(this.backend.multiGet(namespaceKeys));\n\n            case 6:\n              results = _context3.sent;\n              allEntries = {};\n              _iterator2 = _createForOfIteratorHelperLoose(results);\n\n            case 9:\n              if ((_step2 = _iterator2()).done) {\n                _context3.next = 20;\n                break;\n              }\n\n              _ref = _step2.value;\n              _ref2 = _slicedToArray(_ref, 2);\n              compositeKey = _ref2[0];\n              value = _ref2[1];\n              key = this.fromCompositeKey(compositeKey);\n\n              if (!(key === \"_lru\")) {\n                _context3.next = 17;\n                break;\n              }\n\n              return _context3.abrupt(\"continue\", 18);\n\n            case 17:\n              allEntries[key] = JSON.parse(value);\n\n            case 18:\n              _context3.next = 9;\n              break;\n\n            case 20:\n              return _context3.abrupt(\"return\", allEntries);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var value;\n      return _regeneratorRuntime.async(function get$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.peek(key));\n\n            case 2:\n              value = _context4.sent;\n\n              if (value) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 5:\n              this.refreshLRU(key);\n              return _context4.abrupt(\"return\", value);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(key) {\n      var compositeKey, entryJsonString, entry, value, created, deadline, now;\n      return _regeneratorRuntime.async(function peek$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              compositeKey = this.makeCompositeKey(key);\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(this.backend.getItem(compositeKey));\n\n            case 3:\n              entryJsonString = _context5.sent;\n\n              if (entryJsonString) {\n                entry = JSON.parse(entryJsonString);\n              }\n\n              if (entry) {\n                value = entry.value;\n\n                if (this.policy.stdTTL > 0) {\n                  console.dir(Date.parse(entry.created));\n                  created = entry.created ? Date.parse(entry.created) : 0;\n                  deadline = created + this.policy.stdTTL * 1000;\n                  now = Date.now();\n\n                  if (deadline < now) {\n                    this.remove(key);\n                    value = undefined;\n                  }\n                }\n              }\n\n              return _context5.abrupt(\"return\", value);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var compositeKey;\n      return _regeneratorRuntime.async(function remove$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              compositeKey = this.makeCompositeKey(key);\n              _context6.next = 3;\n              return _regeneratorRuntime.awrap(this.backend.removeItem(compositeKey));\n\n            case 3:\n              return _context6.abrupt(\"return\", this.removeFromLRU(key));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var entry, compositeKey, entryString;\n      return _regeneratorRuntime.async(function set$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              entry = {\n                created: new Date(),\n                value: value\n              };\n              compositeKey = this.makeCompositeKey(key);\n              entryString = JSON.stringify(entry);\n              _context7.next = 5;\n              return _regeneratorRuntime.awrap(this.backend.setItem(compositeKey, entryString));\n\n            case 5:\n              _context7.next = 7;\n              return _regeneratorRuntime.awrap(this.refreshLRU(key));\n\n            case 7:\n              return _context7.abrupt(\"return\", this.enforceLimits());\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addToLRU\",\n    value: function addToLRU(key) {\n      var lru;\n      return _regeneratorRuntime.async(function addToLRU$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(this.getLRU());\n\n            case 2:\n              lru = _context8.sent;\n              lru.push(key);\n              return _context8.abrupt(\"return\", this.setLRU(lru));\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getLRU\",\n    value: function getLRU() {\n      var lruString, lru;\n      return _regeneratorRuntime.async(function getLRU$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(this.backend.getItem(this.getLRUKey()));\n\n            case 2:\n              lruString = _context9.sent;\n\n              if (!lruString) {\n                lru = [];\n              } else {\n                lru = JSON.parse(lruString);\n              }\n\n              return _context9.abrupt(\"return\", lru);\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getLRUKey\",\n    value: function getLRUKey() {\n      return this.makeCompositeKey(\"_lru\");\n    }\n  }, {\n    key: \"makeCompositeKey\",\n    value: function makeCompositeKey(key) {\n      return this.namespace + \":\" + key;\n    }\n  }, {\n    key: \"fromCompositeKey\",\n    value: function fromCompositeKey(compositeKey) {\n      return compositeKey.slice(this.namespace.length + 1);\n    }\n  }, {\n    key: \"refreshLRU\",\n    value: function refreshLRU(key) {\n      return _regeneratorRuntime.async(function refreshLRU$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(this.removeFromLRU(key));\n\n            case 2:\n              return _context10.abrupt(\"return\", this.addToLRU(key));\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"removeFromLRU\",\n    value: function removeFromLRU(key) {\n      var lru, newLRU;\n      return _regeneratorRuntime.async(function removeFromLRU$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(this.getLRU());\n\n            case 2:\n              lru = _context11.sent;\n              newLRU = lru.filter(function (item) {\n                return item !== key;\n              });\n              return _context11.abrupt(\"return\", this.setLRU(newLRU));\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setLRU\",\n    value: function setLRU(lru) {\n      return _regeneratorRuntime.async(function setLRU$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt(\"return\", this.backend.setItem(this.getLRUKey(), JSON.stringify(lru)));\n\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Cache;\n}();\n\nexports.default = Cache;","map":{"version":3,"sources":["../src/cache.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Cache {\n    constructor(options) {\n        this.namespace = options.namespace;\n        this.backend = options.backend;\n        this.policy = options.policy;\n        let ttl = this.policy.stdTTL;\n        if (!ttl || typeof ttl !== \"number\") {\n            ttl = 0;\n        }\n        this.policy.stdTTL = ttl;\n    }\n    async clearAll() {\n        const keys = await this.backend.getAllKeys();\n        const namespaceKeys = keys.filter((key) => {\n            return key.substr(0, this.namespace.length) === this.namespace;\n        });\n        await this.backend.multiRemove(namespaceKeys);\n        return this.setLRU([]);\n    }\n    async enforceLimits() {\n        if (!this.policy.maxEntries) {\n            return;\n        }\n        const lru = await this.getLRU();\n        const victimCount = Math.max(0, lru.length - this.policy.maxEntries);\n        const victimList = lru.slice(0, victimCount);\n        const removePromises = [];\n        for (const victimKey of victimList) {\n            removePromises.push(this.remove(victimKey));\n        }\n        await Promise.all(removePromises);\n        const survivorList = lru.slice(victimCount);\n        return this.setLRU(survivorList);\n    }\n    async getAll() {\n        const keys = await this.backend.getAllKeys();\n        const namespaceKeys = keys.filter((key) => {\n            return key.substr(0, this.namespace.length) === this.namespace;\n        });\n        const results = await this.backend.multiGet(namespaceKeys);\n        const allEntries = {};\n        for (const [compositeKey, value] of results) {\n            const key = this.fromCompositeKey(compositeKey);\n            if (key === \"_lru\") {\n                continue;\n            }\n            allEntries[key] = JSON.parse(value);\n        }\n        return allEntries;\n    }\n    async get(key) {\n        const value = await this.peek(key);\n        if (!value) {\n            return;\n        }\n        this.refreshLRU(key);\n        return value;\n    }\n    async peek(key) {\n        const compositeKey = this.makeCompositeKey(key);\n        const entryJsonString = await this.backend.getItem(compositeKey);\n        let entry;\n        if (entryJsonString) {\n            entry = JSON.parse(entryJsonString);\n        }\n        let value;\n        if (entry) {\n            value = entry.value;\n            if (this.policy.stdTTL > 0) {\n                console.dir(Date.parse(entry.created));\n                const created = entry.created ? Date.parse(entry.created) : 0;\n                const deadline = created + this.policy.stdTTL * 1000;\n                const now = Date.now();\n                if (deadline < now) {\n                    this.remove(key);\n                    value = undefined;\n                }\n            }\n        }\n        return value;\n    }\n    async remove(key) {\n        const compositeKey = this.makeCompositeKey(key);\n        await this.backend.removeItem(compositeKey);\n        return this.removeFromLRU(key);\n    }\n    async set(key, value) {\n        const entry = {\n            created: new Date(),\n            value,\n        };\n        const compositeKey = this.makeCompositeKey(key);\n        const entryString = JSON.stringify(entry);\n        await this.backend.setItem(compositeKey, entryString);\n        await this.refreshLRU(key);\n        return this.enforceLimits();\n    }\n    async addToLRU(key) {\n        const lru = await this.getLRU();\n        lru.push(key);\n        return this.setLRU(lru);\n    }\n    async getLRU() {\n        const lruString = await this.backend.getItem(this.getLRUKey());\n        let lru;\n        if (!lruString) {\n            lru = [];\n        }\n        else {\n            lru = JSON.parse(lruString);\n        }\n        return lru;\n    }\n    getLRUKey() {\n        return this.makeCompositeKey(\"_lru\");\n    }\n    makeCompositeKey(key) {\n        return `${this.namespace}:${key}`;\n    }\n    fromCompositeKey(compositeKey) {\n        return compositeKey.slice(this.namespace.length + 1);\n    }\n    async refreshLRU(key) {\n        await this.removeFromLRU(key);\n        return this.addToLRU(key);\n    }\n    async removeFromLRU(key) {\n        const lru = await this.getLRU();\n        const newLRU = lru.filter((item) => {\n            return item !== key;\n        });\n        return this.setLRU(newLRU);\n    }\n    async setLRU(lru) {\n        return this.backend.setItem(this.getLRUKey(), JSON.stringify(lru));\n    }\n}\nexports.default = Cache;\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"script"}
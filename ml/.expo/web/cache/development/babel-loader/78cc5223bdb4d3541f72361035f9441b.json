{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction HomeScreen() {\n  sentiment = ml5.sentiment('movieReviews', modelReady);\n  var sL = false;\n  var cL = false;\n  var sentiment;\n  var charRNN;\n  var report;\n  var loaded;\n  useEffect(function () {}, []);\n\n  function modelReady() {\n    loaded = true;\n    console.log(\"dwa\");\n  }\n\n  function waitUntilTrue(flag) {\n    var prediction;\n    return _regeneratorRuntime.async(function waitUntilTrue$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(waitFor(function (_) {\n              return flag === true;\n            }));\n\n          case 2:\n            console.log('the wait is over!');\n            prediction = sentiment.predict(report);\n            console.log(prediction);\n\n            if (prediction.score > .5) {\n              thought = \"Buy!\";\n            } else {\n              thought = \"Sell!\";\n            }\n\n            return _context.abrupt(\"return\", thought);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function Predict(name) {\n    var res;\n    var report;\n    var thought;\n    fetch('http://localhost:3000/api/generate?qMake%20a%20prediction%20for%20' + name + '%20stock', {\n      mode: 'cors'\n    }).then(function (response) {\n      res = response.text();\n      console.log(res);\n      res.then(function (result) {\n        report = result;\n      });\n    });\n    waitUntilTrue(loaded);\n    return [thought, report];\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Stocks, {\n      symbols: [\"AAPL\", \"TSLA\", \"GME\"],\n      names: [\"Apple\", \"Tesla\", \"Gamestop\"],\n      makePrediction: Predict\n    })\n  });\n}\n\nfunction SettingsScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"Settings!\"\n    })\n  });\n}\n\nvar Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return _jsxs(Tab.Navigator, {\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen\n    })]\n  });\n}\n\nvar myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    theme: DarkTheme,\n    children: _jsx(MyTabs, {})\n  });\n}","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/App.jsx"],"names":["React","NavigationContainer","DefaultTheme","DarkTheme","createBottomTabNavigator","useEffect","useState","ml5","getCompletion","Stocks","HomeScreen","sentiment","modelReady","sL","cL","charRNN","report","loaded","console","log","waitUntilTrue","flag","waitFor","_","prediction","predict","score","thought","Predict","name","res","fetch","mode","then","response","text","result","flex","justifyContent","alignItems","SettingsScreen","Tab","MyTabs","myTheme","colors","background","border","primary","App"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nfunction HomeScreen() {\n  sentiment = ml5.sentiment('movieReviews', modelReady);\n  var sL = false;\n  var cL = false;\n  var sentiment;\n  var charRNN;\n  var report;\n  var loaded;\n\n\n  useEffect(() => {\n\n  }, [])\n\n  function modelReady() {\n    loaded = true;\n    console.log(\"dwa\")\n    \n  }\n  async function waitUntilTrue(flag) {\n    await waitFor(_ => flag === true);\n    console.log('the wait is over!');\n    var prediction;\n\n    prediction = sentiment.predict(report);\n    console.log(prediction);\n    if (prediction.score > .5) {\n      thought = \"Buy!\";\n    }\n    else {\n      thought = \"Sell!\";\n    }\n    return thought;\n  }\n  function Predict(name) {\n    var res;\n    var report;\n    var thought;\n    fetch('http://localhost:3000/api/generate?qMake%20a%20prediction%20for%20' + name + '%20stock', { mode: 'cors' }).then((response) => { res = response.text(); console.log(res); res.then((result) => { report = result }) });\n\n    waitUntilTrue(loaded);\n\n    return [thought, report];\n  }\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Stocks symbols={[\"AAPL\", \"TSLA\", \"GME\"]} names={[\"Apple\", \"Tesla\", \"Gamestop\"]} makePrediction={Predict} />\n    </View>\n  )\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\nconst myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return (\n    <NavigationContainer theme={DarkTheme}>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}"]},"metadata":{},"sourceType":"module"}
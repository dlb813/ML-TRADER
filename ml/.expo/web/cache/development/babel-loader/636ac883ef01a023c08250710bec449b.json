{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction HomeScreen() {\n  var sL = false;\n  var cL = false;\n  var sentiment;\n  var charRNN;\n  useEffect(function () {}, []);\n\n  function modelReady() {}\n\n  function Predict(name) {\n    var res, report, thought, prediction;\n    return _regeneratorRuntime.async(function Predict$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fetch('http://localhost:3000/api/generate?qMake a prediction for ' + name + ' stock', {\n              mode: 'cors'\n            }).then(function (response) {\n              res = response.text();\n              console.log(res);\n              res.then(function (result) {\n                report = result;\n              });\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(ml5.sentiment('movieReviews'));\n\n          case 3:\n            sentiment = _context.sent;\n            prediction = sentiment.predict(report);\n            console.log(prediction);\n\n            if (prediction.score > .5) {\n              thought = \"Buy!\";\n            } else {\n              thought = \"Sell!\";\n            }\n\n            return _context.abrupt(\"return\", [thought, report]);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Stocks, {\n      symbols: [\"AAPL\", \"TSLA\", \"GME\"],\n      names: [\"Apple\", \"Tesla\", \"Gamestop\"],\n      makePrediction: Predict\n    })\n  });\n}\n\nfunction SettingsScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"Settings!\"\n    })\n  });\n}\n\nvar Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return _jsxs(Tab.Navigator, {\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen\n    })]\n  });\n}\n\nvar myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    theme: DarkTheme,\n    children: _jsx(MyTabs, {})\n  });\n}","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/App.jsx"],"names":["React","NavigationContainer","DefaultTheme","DarkTheme","createBottomTabNavigator","useEffect","useState","ml5","getCompletion","Stocks","HomeScreen","sL","cL","sentiment","charRNN","modelReady","Predict","name","fetch","mode","then","response","res","text","console","log","result","report","prediction","predict","score","thought","flex","justifyContent","alignItems","SettingsScreen","Tab","MyTabs","myTheme","colors","background","border","primary","App"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nfunction HomeScreen() {\n  var sL = false;\n  var cL = false;\n  var sentiment;\n  var charRNN;\n\n\n\n  useEffect(() => {\n\n  }, [])\n\n  function modelReady() {\n    \n  }\n  async function Predict(name) {\n    var res;\n    var report;\n    var thought;\n    fetch('http://localhost:3000/api/generate?qMake a prediction for ' + name + ' stock', { mode: 'cors' }).then((response) => { res = response.text(); console.log(res); res.then((result) => { report = result }) });\n    sentiment = await ml5.sentiment('movieReviews');\n    var prediction;\n\n    prediction = sentiment.predict(report);\n    console.log(prediction);\n    if (prediction.score > .5) {\n      thought = \"Buy!\";\n    }\n    else {\n      thought = \"Sell!\";\n    }\n    \n  return [thought, report];\n}\nreturn (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Stocks symbols={[\"AAPL\", \"TSLA\", \"GME\"]} names={[\"Apple\", \"Tesla\", \"Gamestop\"]} makePrediction={Predict} />\n  </View>\n)\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\nconst myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return (\n    <NavigationContainer theme={DarkTheme}>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect, useState } from 'react';\nimport { Cache } from \"react-native-cache\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function FavoritesContent() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      Stocks = _useState2[0],\n      setStocks = _useState2[1];\n\n  useEffect(function () {\n    LoadFavorites();\n  }, []);\n\n  function LoadFavorites() {\n    var cache, text, entries, ent, val;\n    return _regeneratorRuntime.async(function LoadFavorites$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cache = new Cache({\n              namespace: \"Favorites\",\n              policy: {\n                stdTTL: 0\n              },\n              backend: AsyncStorage\n            });\n            text = [];\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(cache.getAll());\n\n          case 4:\n            entries = _context.sent;\n            _context.t0 = _regeneratorRuntime.keys(entries);\n\n          case 6:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 14;\n              break;\n            }\n\n            ent = _context.t1.value;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(cache.get(ent));\n\n          case 10:\n            val = _context.sent;\n            text.push({\n              name: val[0],\n              symbol: val[1],\n              report: val[2],\n              decision: val[3]\n            });\n            _context.next = 6;\n            break;\n\n          case 14:\n            setStocks(text);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(View, {\n    children: _jsx(FlatList, {\n      data: Stocks,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            separators = _ref.separators;\n        return _jsx(TouchableHighlight, {\n          onPress: function onPress() {\n            return _this._onPress(item);\n          },\n          onShowUnderlay: separators.highlight,\n          onHideUnderlay: separators.unhighlight,\n          children: _jsx(View, {\n            style: {\n              backgroundColor: 'white'\n            },\n            children: _jsx(Text, {\n              children: item.symbol\n            })\n          })\n        }, item.name);\n      }\n    })\n  });\n}","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/Favorites.jsx"],"names":["React","AsyncStorage","useEffect","useState","Cache","FavoritesContent","Stocks","setStocks","LoadFavorites","cache","namespace","policy","stdTTL","backend","text","getAll","entries","ent","get","val","push","name","symbol","report","decision","item","separators","_onPress","highlight","unhighlight","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAUA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACvC,kBAA4BF,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOG,MAAP;AAAA,MAAeC,SAAf;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZM,IAAAA,aAAa;AAChB,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAAeA,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,KADV,GACkB,IAAIL,KAAJ,CAAU;AACpBM,cAAAA,SAAS,EAAE,WADS;AAEpBC,cAAAA,MAAM,EAAE;AACJC,gBAAAA,MAAM,EAAE;AADJ,eAFY;AAKpBC,cAAAA,OAAO,EAAEZ;AALW,aAAV,CADlB;AAQQa,YAAAA,IARR,GAQe,EARf;AAAA;AAAA,6CAS0BL,KAAK,CAACM,MAAN,EAT1B;;AAAA;AASUC,YAAAA,OATV;AAAA,mDAUoBA,OAVpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUaC,YAAAA,GAVb;AAAA;AAAA,6CAW0BR,KAAK,CAACS,GAAN,CAAUD,GAAV,CAX1B;;AAAA;AAWcE,YAAAA,GAXd;AAYQL,YAAAA,IAAI,CAACM,IAAL,CAAU;AAAEC,cAAAA,IAAI,EAAEF,GAAG,CAAC,CAAD,CAAX;AAAgBG,cAAAA,MAAM,EAAEH,GAAG,CAAC,CAAD,CAA3B;AAAgCI,cAAAA,MAAM,EAAEJ,GAAG,CAAC,CAAD,CAA3C;AAAgDK,cAAAA,QAAQ,EAAEL,GAAG,CAAC,CAAD;AAA7D,aAAV;AAZR;AAAA;;AAAA;AAcIZ,YAAAA,SAAS,CAACO,IAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SACI,KAAC,IAAD;AAAA,cACI,KAAC,QAAD;AAAU,MAAA,IAAI,EAAER,MAAhB;AAAwB,MAAA,UAAU,EAAE;AAAA,YAAGmB,IAAH,QAAGA,IAAH;AAAA,YAASC,UAAT,QAASA,UAAT;AAAA,eAChC,KAAC,kBAAD;AAEI,UAAA,OAAO,EAAE;AAAA,mBAAM,KAAI,CAACC,QAAL,CAAcF,IAAd,CAAN;AAAA,WAFb;AAGI,UAAA,cAAc,EAAEC,UAAU,CAACE,SAH/B;AAII,UAAA,cAAc,EAAEF,UAAU,CAACG,WAJ/B;AAAA,oBAKI,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAAb;AAAA,sBACI,KAAC,IAAD;AAAA,wBAAOL,IAAI,CAACH;AAAZ;AADJ;AALJ,WACSG,IAAI,CAACJ,IADd,CADgC;AAAA;AAApC;AADJ,IADJ;AAeH","sourcesContent":["import React from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    TouchableHighlight,\r\n    Image,\r\n    FlatList,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useEffect, useState } from 'react';\r\nimport { Cache } from \"react-native-cache\";\r\n\r\nexport default function FavoritesContent() {\r\n    const [Stocks, setStocks] = useState([]);\r\n    useEffect(() => {\r\n        LoadFavorites();\r\n    }, []);\r\n\r\n    async function LoadFavorites() {\r\n        const cache = new Cache({\r\n            namespace: \"Favorites\",\r\n            policy: {\r\n                stdTTL: 0\r\n            },\r\n            backend: AsyncStorage\r\n        });\r\n        var text = [];\r\n        const entries = await cache.getAll();\r\n        for (let ent in entries) {\r\n            const val = await cache.get(ent);\r\n            text.push({ name: val[0], symbol: val[1], report: val[2], decision: val[3] });\r\n        }\r\n        setStocks(text);\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList data={Stocks} renderItem={({ item, separators }) => (\r\n                <TouchableHighlight\r\n                    key={item.name}\r\n                    onPress={() => this._onPress(item)}\r\n                    onShowUnderlay={separators.highlight}\r\n                    onHideUnderlay={separators.unhighlight}>\r\n                    <View style={{ backgroundColor: 'white' }}>\r\n                        <Text>{item.symbol}</Text>\r\n                    </View>\r\n                </TouchableHighlight>\r\n            )}/>\r\n        </View>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
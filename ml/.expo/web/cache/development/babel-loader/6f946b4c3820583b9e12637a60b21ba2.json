{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { SearchBar } from 'react-native-elements';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect, useState } from 'react';\nimport { Cache } from \"react-native-cache\";\nimport { Symbols, Names } from \"./Data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar stocksAndSymbols = Symbols.concat(Names);\nexport default function SearchContent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState([_jsx(Text, {\n    children: \"Search for a stock name or symbol.\"\n  })]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setResults = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var updateSearch = function updateSearch(search) {\n    var content, i, included, sym;\n    return _regeneratorRuntime.async(function updateSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearch(search);\n            content = [];\n            i = 0;\n            included = 0;\n            _context.t0 = _regeneratorRuntime.keys(Symbols);\n\n          case 5:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 13;\n              break;\n            }\n\n            sym = _context.t1.value;\n\n            if (stocksAndSymbols[i].includes(search) || stocksAndSymbols[i + Symbols.length].includes(search)) {\n              content.push(_jsx(Button, {\n                style: styles.Button,\n                onPress: function onPress() {\n                  return setModalVisible(true);\n                },\n                children: _jsxs(Text, {\n                  style: styles.text,\n                  children: [Symbols[i], _jsx(\"br\", {}), Names[i]]\n                }, \"text:\" + sym)\n              }, sym));\n              included++;\n            }\n\n            if (!(included >= 5)) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 13);\n\n          case 10:\n            i++;\n            _context.next = 5;\n            break;\n\n          case 13:\n            setResults(content);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.view,\n    children: [_jsx(SearchBar, {\n      placeholder: \"Search...\",\n      onChangeText: updateSearch,\n      value: search\n    }), _jsx(ScrollView, {\n      children: results\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: \"Hello World!\"\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Hide Modal\"\n            })\n          })]\n        })\n      })\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  view: {\n    margin: 0,\n    flex: 1,\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    marginTop: 16,\n    padding: 4,\n    borderWidth: 4,\n    borderColor: \"#D8D8D8\",\n    borderRadius: 6,\n    backgroundColor: \"#291F3F\",\n    color: \"#FFFFFF\",\n    textAlign: \"left\",\n    fontSize: 12,\n    fontWeight: \"bold\"\n  },\n  pressable: {},\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  }\n});","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/Search.jsx"],"names":["React","SearchBar","AsyncStorage","useEffect","useState","Cache","Symbols","Names","stocksAndSymbols","concat","SearchContent","search","setSearch","results","setResults","modalVisible","setModalVisible","updateSearch","content","i","included","sym","includes","length","push","styles","Button","text","view","Alert","alert","centeredView","modalView","modalText","button","buttonClose","textStyle","StyleSheet","create","margin","flex","padding","color","marginTop","borderWidth","borderColor","borderRadius","backgroundColor","textAlign","fontSize","fontWeight","pressable","alignItems","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    Image,\r\n    ScrollView,\r\n    Pressable,\r\n    Modal,\r\n    Button,\r\n} from 'react-native';\r\nimport { SearchBar } from 'react-native-elements';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useEffect, useState } from 'react';\r\nimport { Cache } from \"react-native-cache\";\r\nimport { Symbols, Names } from \"./Data\";\r\nconst stocksAndSymbols = Symbols.concat(Names);\r\n\r\nexport default function SearchContent() {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [results, setResults] = useState([<Text>Search for a stock name or symbol.</Text>]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n\r\n    const updateSearch = async (search) => {\r\n        setSearch(search);\r\n        var content = [];\r\n        var i = 0;\r\n        var included = 0;\r\n        for (let sym in Symbols) {\r\n            if (stocksAndSymbols[i].includes(search) || stocksAndSymbols[i + Symbols.length].includes(search)) {\r\n                content.push(<Button key={sym} style={styles.Button} onPress={() => setModalVisible(true)}><Text key={\"text:\" + sym} style={styles.text}>{Symbols[i]}<br></br>{Names[i]}</Text></Button>)\r\n                included++;\r\n            }\r\n            if (included >= 5) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        setResults(content);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.view}>\r\n            <SearchBar placeholder=\"Search...\" onChangeText={updateSearch} value={search} />\r\n            <ScrollView>{results}</ScrollView>\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={modalVisible}\r\n                onRequestClose={() => {\r\n                    Alert.alert(\"Modal has been closed.\");\r\n                    setModalVisible(!modalVisible);\r\n                }}\r\n            >\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text style={styles.modalText}>Hello World!</Text>\r\n                        <Pressable\r\n                            style={[styles.button, styles.buttonClose]}\r\n                            onPress={() => setModalVisible(!modalVisible)}\r\n                        >\r\n                            <Text style={styles.textStyle}>Hide Modal</Text>\r\n                        </Pressable>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    view: {\r\n        margin: 0,\r\n        flex: 1,\r\n        padding: 10,\r\n    },\r\n    text: {\r\n        color: 'white',\r\n        marginTop: 16,\r\n        padding: 4,\r\n        borderWidth: 4,\r\n        borderColor: \"#D8D8D8\",\r\n        borderRadius: 6,\r\n        backgroundColor: \"#291F3F\",\r\n        color: \"#FFFFFF\",\r\n        textAlign: \"left\",\r\n        fontSize: 12,\r\n        fontWeight: \"bold\"\r\n    },\r\n    pressable: {\r\n    },\r\n    modalView: {\r\n        margin: 20,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 20,\r\n        padding: 35,\r\n        alignItems: \"center\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n          width: 0,\r\n          height: 2\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 4,\r\n        elevation: 5\r\n      },\r\n      button: {\r\n        borderRadius: 20,\r\n        padding: 10,\r\n        elevation: 2\r\n      },\r\n      centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 22\r\n      },\r\n});"]},"metadata":{},"sourceType":"module"}
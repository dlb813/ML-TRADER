{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { SearchBar } from 'react-native-elements';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect, useState } from 'react';\nimport { Cache } from \"react-native-cache\";\nimport { Symbols, Names } from \"./Data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar stocksAndSymbols = Symbols.concat(Names);\nexport default function SearchContent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState([_jsx(Text, {\n    children: \"Search for a stock name or symbol.\"\n  })]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setResults = _useState4[1];\n\n  var updateSearch = function updateSearch(search) {\n    var content, i, included, sym;\n    return _regeneratorRuntime.async(function updateSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearch(search);\n            content = [];\n            i = 0;\n            included = 0;\n            _context.t0 = _regeneratorRuntime.keys(Symbols);\n\n          case 5:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 13;\n              break;\n            }\n\n            sym = _context.t1.value;\n\n            if (stocksAndSymbols[i].includes(search) || stocksAndSymbols[i + Symbols.length].includes(search)) {\n              content.push(_jsx(Pressable, {\n                style: styles.pressable,\n                children: _jsxs(Text, {\n                  style: styles.text,\n                  children: [Symbols[i], _jsx(\"br\", {}), Names[i]]\n                }, \"text:\" + sym)\n              }, sym));\n              included++;\n            }\n\n            if (!(included >= 5)) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 13);\n\n          case 10:\n            i++;\n            _context.next = 5;\n            break;\n\n          case 13:\n            setResults(content);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.view,\n    children: [_jsx(SearchBar, {\n      placeholder: \"Search...\",\n      onChangeText: updateSearch,\n      value: search\n    }), _jsx(ScrollView, {\n      children: results\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  view: {\n    margin: 100,\n    flex: 1,\n    padding: 2\n  },\n  text: {\n    color: 'white',\n    marginTop: 16,\n    padding: 4,\n    borderWidth: 4,\n    borderColor: \"#D8D8D8\",\n    borderRadius: 6,\n    backgroundColor: \"#291F3F\",\n    color: \"#FFFFFF\",\n    textAlign: \"left\",\n    fontSize: 12,\n    fontWeight: \"bold\"\n  },\n  pressable: {}\n});","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/Search.jsx"],"names":["React","SearchBar","AsyncStorage","useEffect","useState","Cache","Symbols","Names","stocksAndSymbols","concat","SearchContent","search","setSearch","results","setResults","updateSearch","content","i","included","sym","includes","length","push","styles","pressable","text","view","StyleSheet","create","margin","flex","padding","color","marginTop","borderWidth","borderColor","borderRadius","backgroundColor","textAlign","fontSize","fontWeight"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAUA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB;;;AACA,IAAMC,gBAAgB,GAAGF,OAAO,CAACG,MAAR,CAAeF,KAAf,CAAzB;AAEA,eAAe,SAASG,aAAT,GAAyB;AACpC,kBAA4BN,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOO,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA8BR,QAAQ,CAAC,CAAC,KAAC,IAAD;AAAA;AAAA,IAAD,CAAD,CAAtC;AAAA;AAAA,MAAOS,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMJ,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,SAAS,CAACD,MAAD,CAAT;AACIK,YAAAA,OAFa,GAEH,EAFG;AAGbC,YAAAA,CAHa,GAGX,CAHW;AAIbC,YAAAA,QAJa,GAIJ,CAJI;AAAA,mDAKFZ,OALE;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKTa,YAAAA,GALS;;AAOb,gBAAGX,gBAAgB,CAACS,CAAD,CAAhB,CAAoBG,QAApB,CAA6BT,MAA7B,KAAsCH,gBAAgB,CAACS,CAAC,GAACX,OAAO,CAACe,MAAX,CAAhB,CAAmCD,QAAnC,CAA4CT,MAA5C,CAAzC,EACA;AACIK,cAAAA,OAAO,CAACM,IAAR,CAAa,KAAC,SAAD;AAAqB,gBAAA,KAAK,EAAEC,MAAM,CAACC,SAAnC;AAAA,0BAA8C,MAAC,IAAD;AAAwB,kBAAA,KAAK,EAAED,MAAM,CAACE,IAAtC;AAAA,6BAA6CnB,OAAO,CAACW,CAAD,CAApD,EAAwD,cAAxD,EAAkEV,KAAK,CAACU,CAAD,CAAvE;AAAA,mBAAW,UAAQE,GAAnB;AAA9C,iBAAgBA,GAAhB,CAAb;AACAD,cAAAA,QAAQ;AACX;;AAXY,kBAYVA,QAAQ,IAAE,CAZA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgBbD,YAAAA,CAAC;AAhBY;AAAA;;AAAA;AAkBjBH,YAAAA,UAAU,CAACE,OAAD,CAAV;;AAlBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAqBA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEO,MAAM,CAACG,IAApB;AAAA,eACI,KAAC,SAAD;AAAW,MAAA,WAAW,EAAC,WAAvB;AAAmC,MAAA,YAAY,EAAEX,YAAjD;AAA+D,MAAA,KAAK,EAAEJ;AAAtE,MADJ,EAEI,KAAC,UAAD;AAAA,gBAAaE;AAAb,MAFJ;AAAA,IADJ;AAMH;AAAA;AAED,IAAMU,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,IAAI,EAAE;AACJG,IAAAA,MAAM,EAAE,GADJ;AAEJC,IAAAA,IAAI,EAAE,CAFF;AAGJC,IAAAA,OAAO,EAAE;AAHL,GADyB;AAM/BN,EAAAA,IAAI,EAAE;AACJO,IAAAA,KAAK,EAAE,OADH;AAEJC,IAAAA,SAAS,EAAE,EAFP;AAGJF,IAAAA,OAAO,EAAE,CAHL;AAIJG,IAAAA,WAAW,EAAE,CAJT;AAKJC,IAAAA,WAAW,EAAE,SALT;AAMJC,IAAAA,YAAY,EAAE,CANV;AAOJC,IAAAA,eAAe,EAAE,SAPb;AAQJL,IAAAA,KAAK,EAAE,SARH;AASJM,IAAAA,SAAS,EAAE,MATP;AAUJC,IAAAA,QAAQ,EAAE,EAVN;AAWJC,IAAAA,UAAU,EAAE;AAXR,GANyB;AAmB/BhB,EAAAA,SAAS,EAAE;AAnBoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    Image,\r\n    ScrollView,\r\n    Pressable,\r\n} from 'react-native';\r\nimport { SearchBar } from 'react-native-elements';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useEffect, useState } from 'react';\r\nimport { Cache } from \"react-native-cache\";\r\nimport { Symbols, Names } from \"./Data\";\r\nconst stocksAndSymbols = Symbols.concat(Names);\r\n\r\nexport default function SearchContent() {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [results, setResults] = useState([<Text>Search for a stock name or symbol.</Text>]);\r\n\r\n    const updateSearch = async(search) => {\r\n        setSearch(search);\r\n        var content = [];\r\n        var i=0;\r\n        var included=0;\r\n        for(let sym in Symbols)\r\n        {\r\n            if(stocksAndSymbols[i].includes(search)||stocksAndSymbols[i+Symbols.length].includes(search))\r\n            {\r\n                content.push(<Pressable key={sym} style={styles.pressable}><Text key={\"text:\"+sym} style={styles.text}>{Symbols[i]}<br></br>{Names[i]}</Text></Pressable>)\r\n                included++;\r\n            }\r\n            if(included>=5)\r\n            {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        setResults(content);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.view}>\r\n            <SearchBar placeholder=\"Search...\" onChangeText={updateSearch} value={search} />\r\n            <ScrollView>{results}</ScrollView>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    margin: 100,\r\n    flex: 1,\r\n    padding: 2,\r\n  },\r\n  text: {\r\n    color: 'white',\r\n    marginTop: 16,\r\n    padding: 4,\r\n    borderWidth: 4,\r\n    borderColor: \"#D8D8D8\",\r\n    borderRadius: 6,\r\n    backgroundColor: \"#291F3F\",\r\n    color: \"#FFFFFF\",\r\n    textAlign: \"left\",\r\n    fontSize: 12,\r\n    fontWeight: \"bold\"\r\n  },\r\n  pressable: {\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Cache } from \"react-native-cache\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FavoritesContent = forwardRef(function (props, ref) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      Stocks = _useState2[0],\n      setStocks = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalContent = _useState6[0],\n      setModalContent = _useState6[1];\n\n  useEffect(function () {\n    LoadFavorites();\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      Refresh: function Refresh() {\n        LoadFavorites();\n      }\n    };\n  });\n\n  function LoadFavorites() {\n    var cache, text, entries, ent, val;\n    return _regeneratorRuntime.async(function LoadFavorites$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cache = new Cache({\n              namespace: \"Favorites\",\n              policy: {\n                stdTTL: 0\n              },\n              backend: AsyncStorage\n            });\n            text = [];\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(cache.getAll());\n\n          case 4:\n            entries = _context.sent;\n            _context.t0 = _regeneratorRuntime.keys(entries);\n\n          case 6:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 14;\n              break;\n            }\n\n            ent = _context.t1.value;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(cache.get(ent));\n\n          case 10:\n            val = _context.sent;\n            text.push({\n              name: val[0],\n              symbol: val[1],\n              report: val[2],\n              decision: val[3]\n            });\n            _context.next = 6;\n            break;\n\n          case 14:\n            setStocks(text);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function prediction(name, symbol) {\n    var prediction, pred;\n    return _regeneratorRuntime.async(function prediction$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(props.makePrediction(name));\n\n          case 2:\n            prediction = _context2.sent;\n            pred = prediction[1].replace(/\\n/g, '');\n            setModalContent(_jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.modalText,\n                children: name\n              }), _jsx(Text, {\n                style: styles.modalText,\n                children: symbol\n              }), _jsx(Text, {\n                style: styles.modalText,\n                children: prediction[0]\n              }), _jsx(Text, {\n                style: styles.modalText,\n                children: pred\n              })]\n            }));\n            setModalVisible(true);\n            console.log(\"s\");\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(ScrollView, {\n      children: _jsx(FlatList, {\n        data: Stocks,\n        nestedScrollEnabled: true,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item,\n              separators = _ref.separators;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              setModalVisible(true);\n              setModalContent(_jsx(Text, {\n                style: styles.modalText,\n                children: \"Loading\"\n              }));\n              prediction(item.name, item.symbol);\n            },\n            onShowUnderlay: separators.highlight,\n            onHideUnderlay: separators.unhighlight,\n            style: styles.Pressable,\n            children: _jsx(View, {\n              style: styles.view,\n              children: _jsxs(Text, {\n                style: styles.text,\n                children: [item.name, _jsx(\"br\", {}), item.symbol]\n              })\n            })\n          }, item.name);\n        }\n      })\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [modalContent, _jsx(Pressable, {\n            style: [styles.hideModal, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.modalText,\n              children: \"Hide Modal\"\n            })\n          })]\n        })\n      })\n    })]\n  });\n});\nvar styles = StyleSheet.create({\n  view: {\n    margin: 0,\n    flex: 1,\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    marginTop: 2,\n    padding: 4,\n    borderWidth: 1,\n    borderColor: \"#D8D8D8\",\n    borderRadius: 6,\n    backgroundColor: \"#291F3F\",\n    color: \"#FFFFFF\",\n    textAlign: \"left\",\n    fontSize: 12,\n    fontWeight: \"bold\"\n  },\n  modalText: {\n    textAlign: \"center\",\n    color: \"white\"\n  },\n  hideModal: {\n    textAlign: \"center\",\n    color: \"white\",\n    backgroundColor: \"#625D72\",\n    padding: 4,\n    paddingHorizontal: 50,\n    borderRadius: 10,\n    marginTop: 10\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"#3A3441\",\n    borderRadius: 20,\n    borderColor: \"white\",\n    borderWidth: 2,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  }\n});\nexport default FavoritesContent;","map":{"version":3,"sources":["C:/Projects/machinelearningapp/Favorites.jsx"],"names":["React","AsyncStorage","useEffect","useState","forwardRef","useImperativeHandle","Cache","FavoritesContent","props","ref","Stocks","setStocks","modalVisible","setModalVisible","modalContent","setModalContent","LoadFavorites","Refresh","cache","namespace","policy","stdTTL","backend","text","getAll","entries","ent","get","val","push","name","symbol","report","decision","prediction","makePrediction","pred","replace","styles","modalText","console","log","item","separators","highlight","unhighlight","Pressable","view","Alert","alert","centeredView","modalView","hideModal","buttonClose","StyleSheet","create","margin","flex","padding","color","marginTop","borderWidth","borderColor","borderRadius","backgroundColor","textAlign","fontSize","fontWeight","paddingHorizontal","alignItems","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","button","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    TouchableHighlight,\r\n    Image,\r\n    FlatList,\r\n    Pressable,\r\n    Modal,\r\n    RefreshControl,\r\n    ScrollView,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Cache } from \"react-native-cache\";\r\n\r\nconst FavoritesContent = forwardRef((props, ref) => {\r\n    const [Stocks, setStocks] = useState([]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [modalContent, setModalContent] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        LoadFavorites();\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        Refresh() {\r\n            LoadFavorites();\r\n        },\r\n    }))\r\n\r\n    async function LoadFavorites() {\r\n        const cache = new Cache({\r\n            namespace: \"Favorites\",\r\n            policy: {\r\n                stdTTL: 0\r\n            },\r\n            backend: AsyncStorage\r\n        });\r\n        var text = [];\r\n        const entries = await cache.getAll();\r\n        for (let ent in entries) {\r\n            const val = await cache.get(ent);\r\n            text.push({ name: val[0], symbol: val[1], report: val[2], decision: val[3] });\r\n        }\r\n        setStocks(text);\r\n    }\r\n\r\n    async function prediction(name, symbol) {\r\n        var prediction = await props.makePrediction(name);\r\n\r\n        var pred = prediction[1].replace(/\\n/g, '');\r\n        setModalContent(\r\n            <View>\r\n                <Text style={styles.modalText}>{name}</Text>\r\n                <Text style={styles.modalText}>{symbol}</Text>\r\n                <Text style={styles.modalText}>{prediction[0]}</Text>\r\n                <Text style={styles.modalText}>{pred}</Text>\r\n            </View>\r\n        );\r\n        setModalVisible(true);\r\n        console.log(\"s\");\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <ScrollView>\r\n            <FlatList data={Stocks}  nestedScrollEnabled={true}renderItem={({ item, separators }) => (\r\n                <Pressable\r\n                    key={item.name}\r\n                    onPress={() => { setModalVisible(true); setModalContent(<Text style={styles.modalText}>Loading</Text>); prediction(item.name, item.symbol) }}\r\n                    onShowUnderlay={separators.highlight}\r\n                    onHideUnderlay={separators.unhighlight}\r\n                    style={styles.Pressable}>\r\n                    <View style={styles.view}>\r\n                        <Text style={styles.text}>{item.name}\r\n                            <br></br>{item.symbol}</Text>\r\n                    </View>\r\n                </Pressable>\r\n            )} />\r\n            </ScrollView>\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={modalVisible}\r\n                onRequestClose={() => {\r\n                    Alert.alert(\"Modal has been closed.\");\r\n                    setModalVisible(!modalVisible);\r\n                }}\r\n            >\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        {modalContent}\r\n                        <Pressable\r\n                            style={[styles.hideModal, styles.buttonClose]}\r\n                            onPress={() => setModalVisible(!modalVisible)}\r\n                        >\r\n                            <Text style={styles.modalText}>Hide Modal</Text>\r\n                        </Pressable>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n});\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    view: {\r\n        margin: 0,\r\n        flex: 1,\r\n        padding: 10,\r\n    },\r\n    text: {\r\n        color: 'white',\r\n        marginTop: 2,\r\n        padding: 4,\r\n        borderWidth: 1,\r\n        borderColor: \"#D8D8D8\",\r\n        borderRadius: 6,\r\n        backgroundColor: \"#291F3F\",\r\n        color: \"#FFFFFF\",\r\n        textAlign: \"left\",\r\n        fontSize: 12,\r\n        fontWeight: \"bold\"\r\n    },\r\n    modalText: {\r\n        textAlign: \"center\",\r\n        color: \"white\"\r\n    },\r\n    hideModal: {\r\n        textAlign: \"center\",\r\n        color: \"white\",\r\n        backgroundColor: \"#625D72\",\r\n        padding: 4,\r\n        paddingHorizontal: 50,\r\n        borderRadius: 10,\r\n        marginTop: 10,\r\n    },\r\n    modalView: {\r\n        margin: 20,\r\n        backgroundColor: \"#3A3441\",\r\n        borderRadius: 20,\r\n        borderColor: \"white\",\r\n        borderWidth: 2,\r\n        padding: 35,\r\n        alignItems: \"center\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 4,\r\n        elevation: 5\r\n    },\r\n    button: {\r\n        borderRadius: 20,\r\n        padding: 10,\r\n        elevation: 2\r\n    },\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 22\r\n    },\r\n});\r\n\r\nexport default FavoritesContent;"]},"metadata":{},"sourceType":"module"}
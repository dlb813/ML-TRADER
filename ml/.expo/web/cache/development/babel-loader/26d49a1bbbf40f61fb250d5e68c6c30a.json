{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport * as Sentiment from \"sentiment\";\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport FavoritesContent from \"./Favorites\";\nimport SearchContent from \"./Search\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction HomeScreen() {\n  useEffect(function () {}, []);\n\n  function Predict(name) {\n    var res, report, rep, thought, sentiment, options, prediction, pred;\n    return _regeneratorRuntime.async(function Predict$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"predicting\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/generate?q=Will%20' + name + '%20stock%20increase%20or%20decrease?%20Why?\\n\\n', {\n              mode: 'cors'\n            }));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(res.text());\n\n          case 6:\n            report = _context.sent;\n            rep = report;\n            sentiment = new Sentiment();\n            options = {\n              extras: {\n                'amazing': 2,\n                'positive': 2,\n                'will be up': 2,\n                'to be up': 2,\n                'will decline': -3,\n                'expect a negative return ': -6,\n                'continue to rise': 2,\n                'is under pressure': -7\n              }\n            };\n            prediction = sentiment.analyze(rep, options);\n\n            if (prediction.score > 0) {\n              thought = \"Buy!\";\n            } else if (prediction.score == 0) {\n              thought = \"Hold!\";\n            } else {\n              thought = \"Sell!\";\n            }\n\n            pred = [thought, rep];\n            return _context.abrupt(\"return\", pred);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Stocks, {\n      makePrediction: Predict\n    })\n  });\n}\n\nfunction AboutScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"Settings!\"\n    })\n  });\n}\n\nfunction Favorites() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(FavoritesContent, {})\n  });\n}\n\nfunction History() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"History!\"\n    })\n  });\n}\n\nfunction Search() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      color: 'white'\n    },\n    children: _jsx(SearchContent, {})\n  });\n}\n\nvar Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return _jsxs(Tab.Navigator, {\n    initialRouteName: \"Home\",\n    children: [_jsx(Tab.Screen, {\n      name: \"Search\",\n      component: Search,\n      options: {\n        tabBarLabel: 'Search',\n        tabBarIcon: function tabBarIcon(_ref) {\n          var color = _ref.color;\n          return _jsx(MaterialCommunityIcons, {\n            name: \"card-search\",\n            color: color,\n            size: 26\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Favorites\",\n      component: Favorites,\n      options: {\n        tabBarLabel: 'Favorites',\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var color = _ref2.color;\n          return _jsx(MaterialCommunityIcons, {\n            name: \"bookmark\",\n            color: color,\n            size: 26\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen,\n      options: {\n        tabBarLabel: 'Home',\n        tabBarIcon: function tabBarIcon(_ref3) {\n          var color = _ref3.color;\n          return _jsx(MaterialCommunityIcons, {\n            name: \"home\",\n            color: color,\n            size: 26\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"History\",\n      component: History,\n      options: {\n        tabBarLabel: 'History',\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var color = _ref4.color;\n          return _jsx(MaterialCommunityIcons, {\n            name: \"history\",\n            color: color,\n            size: 26\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"About\",\n      component: AboutScreen,\n      options: {\n        tabBarLabel: 'About',\n        tabBarIcon: function tabBarIcon(_ref5) {\n          var color = _ref5.color;\n          return _jsx(MaterialCommunityIcons, {\n            name: \"information\",\n            color: color,\n            size: 26\n          });\n        }\n      }\n    })]\n  });\n}\n\nvar myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    theme: DarkTheme,\n    children: _jsx(MyTabs, {})\n  });\n}","map":{"version":3,"sources":["C:/Projects/MachineLearningApp/App.jsx"],"names":["React","NavigationContainer","Sentiment","DefaultTheme","DarkTheme","createBottomTabNavigator","useEffect","useState","ml5","getCompletion","Stocks","MaterialCommunityIcons","FavoritesContent","SearchContent","HomeScreen","Predict","name","console","log","fetch","mode","res","text","report","rep","sentiment","options","extras","prediction","analyze","score","thought","pred","flex","justifyContent","alignItems","AboutScreen","Favorites","History","Search","color","Tab","MyTabs","tabBarLabel","tabBarIcon","myTheme","colors","background","border","primary","App"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport * as Sentiment from \"sentiment\";\nimport { DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useEffect, useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport { getCompletion } from \"gpt3\";\nimport { Stocks } from \"./Stocks\";\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport FavoritesContent from \"./Favorites\";\nimport SearchContent from \"./Search\";\nfunction HomeScreen() {\n  useEffect(() => {\n\n  }, [])\n\n  async function Predict(name) {\n    var res;\n\n    console.log(\"predicting\");\n    var res = await fetch('http://localhost:3000/api/generate?q=Will%20' + name + '%20stock%20increase%20or%20decrease?%20Why?\\n\\n', { mode: 'cors' });\n    var report = await res.text();\n    var rep = report;\n\n    var thought;\n    var sentiment = new Sentiment();\n    var options = {\n      extras: {\n        'amazing': 2,\n        'positive': 2,\n        'will be up': 2,\n        'to be up': 2,\n        'will decline': -3,\n        'expect a negative return ': -6,\n        'continue to rise': 2,\n        'is under pressure': -7,\n      }\n    };\n    var prediction = sentiment.analyze(rep, options);\n    if (prediction.score > 0) {\n      thought = \"Buy!\";\n    }\n    else if (prediction.score == 0) {\n      thought = \"Hold!\";\n    }\n    else {\n      thought = \"Sell!\";\n    }\n    var pred = [thought, rep];\n    return pred;\n  }\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Stocks makePrediction={Predict} />\n    </View>\n  )\n}\n\nfunction AboutScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\nfunction Favorites() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <FavoritesContent/>\n    </View>\n  );\n}\nfunction History() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>History!</Text>\n    </View>\n  );\n}\nfunction Search() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', color:'white'}}>\n      <SearchContent/>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator initialRouteName=\"Home\">\n      <Tab.Screen name=\"Search\" component={Search} options={{\n        tabBarLabel: 'Search',\n        tabBarIcon: ({ color }) => (\n          <MaterialCommunityIcons name=\"card-search\" color={color} size={26} />\n        ),\n      }}/>\n      <Tab.Screen name=\"Favorites\" component={Favorites} options={{\n        tabBarLabel: 'Favorites',\n        tabBarIcon: ({ color }) => (\n          <MaterialCommunityIcons name=\"bookmark\" color={color} size={26} />\n        ),\n      }}/>\n      <Tab.Screen name=\"Home\" component={HomeScreen} options={{\n        tabBarLabel: 'Home',\n        tabBarIcon: ({ color }) => (\n          <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n        ),\n      }} />\n      <Tab.Screen name=\"History\" component={History} options={{\n        tabBarLabel: 'History',\n        tabBarIcon: ({ color }) => (\n          <MaterialCommunityIcons name=\"history\" color={color} size={26} />\n        ),\n      }}/>\n       <Tab.Screen name=\"About\" component={AboutScreen} options={{\n        tabBarLabel: 'About',\n        tabBarIcon: ({ color }) => (\n          <MaterialCommunityIcons name=\"information\" color={color} size={26} />\n        ),\n      }}/>\n    </Tab.Navigator>\n  );\n}\nconst myTheme = DarkTheme;\nmyTheme.colors.text = 'rgb(256, 256, 256)';\nmyTheme.colors.background = DarkTheme.colors.border;\nmyTheme.colors.primary = DarkTheme.colors.primary;\nexport default function App() {\n  return (\n    <NavigationContainer theme={DarkTheme}>\n      <MyTabs />\n    </NavigationContainer>\n  );\n}"]},"metadata":{},"sourceType":"module"}